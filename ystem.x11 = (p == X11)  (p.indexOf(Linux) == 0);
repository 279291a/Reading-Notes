[33mcommit 3d07f6cccd0eedc8cac9141b84f5598cb884718b[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m, [m[1;31morigin/HEAD[m[33m)[m
Author: verfallen <1515661632@qq.com>
Date:   Thu Dec 20 15:32:04 2018 +0800

    删除笔记

[1mdiff --git a/README.md b/README.md[m
[1mindex 9ec7bdc..a242aa9 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -3,7 +3,6 @@[m
 高程笔记[m
 + [正则表达式](./高程笔记/正则表达式（RegExp）.md)[m
 + [函数](./高程笔记/函数.md)[m
[31m-+ [BOM之window对象](./高程笔记/BOM之window对象/BOM之window对象.md)[m
 + [四、变量、作用域和内存问题](./高程笔记/四、变量、作用域和内存问题.md)[m
 + [五、引用类型](./高程笔记/五、引用类型.md)[m
 + [六、面向对象](./高程笔记/六、面向对象.md)[m
[1mdiff --git "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531035654222.png" "b/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531035654222.png"[m
[1mdeleted file mode 100644[m
[1mindex cd12414..0000000[m
Binary files "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531035654222.png" and /dev/null differ
[1mdiff --git "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531035934129.png" "b/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531035934129.png"[m
[1mdeleted file mode 100644[m
[1mindex 7c90cc1..0000000[m
Binary files "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531035934129.png" and /dev/null differ
[1mdiff --git "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531751185572.png" "b/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531751185572.png"[m
[1mdeleted file mode 100644[m
[1mindex 881a9d7..0000000[m
Binary files "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/1531751185572.png" and /dev/null differ
[1mdiff --git "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/BOM\344\271\213window\345\257\271\350\261\241.md" "b/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/BOM\344\271\213window\345\257\271\350\261\241.md"[m
[1mdeleted file mode 100644[m
[1mindex a1ccf66..0000000[m
[1m--- "a/\351\253\230\347\250\213\347\254\224\350\256\260/BOM\344\271\213window\345\257\271\350\261\241/BOM\344\271\213window\345\257\271\350\261\241.md"[m
[1m+++ /dev/null[m
[36m@@ -1,143 +0,0 @@[m
[31m-## BOM 之window 对象[m
[31m-[TOC][m
[31m-### `window` 概念[m
[31m-`window`对象，表示的是浏览器的一个实例，`window`对象有两重意义，一是作为`javascript`访问浏览器的一个接口，二是作为`ECMAScript`规定的全局对象。[m
[31m-### 全局作用域[m
[31m-在全局作用域下定义的变量和函数都会变成`window`对象的属性和方法。[m
[31m-[m
[31m-```javascript[m
[31m-var age = 18;[m
[31m-console.log(window.age);  //18[m
[31m-[m
[31m-var foo = function() {[m
[31m-	return 'foo'[m
[31m-};[m
[31m-[m
[31m-console.log(window.foo === foo);  // true[m
[31m-```[m
[31m-全局变量与`window`d对象的属性存在两点差别：[m
[31m-1. 全局变量不可以使用`delete`删除，而直接在`window`上定义的属性可以删除。[m
[31m-``` javascript[m
[31m- var age = 18;[m
[31m- window.color = 'red';[m
[31m-[m
[31m- delete window.color // true[m
[31m- delete window.age //false[m
[31m-```[m
[31m-2. 访问未定义变量会报错，访问`window`未定义属性返回`undefined`[m
[31m-```javascript[m
[31m-obj; // Uncaught ReferenceError: obj is not defined[m
[31m-window.obj //underfined[m
[31m-```[m
[31m-### 窗口信息[m
[31m-#### 窗口位置[m
[31m-`screenTop`：窗口相对于上边的位置[m
[31m-`screenLeft`:窗口相对于左边的位置[m
[31m-在**FireFox** 中，`screenX`和`screenY`属性提供与上述相同的**窗口位置信息**。[m
[31m-##### 跨浏览器取得窗口左边和上边的位置（非精确值）[m
[31m-``` javascript[m
[31m-var left = typeof (window.screenLeft === "number")[m
[31m-  ? window.screenLeft[m
[31m-  : window.screenX;[m
[31m-var top = typeof (window.screenTop === "number")[m
[31m-  ? window.screenTop[m
[31m-  : window.screenY;[m
[31m-```[m
[31m-#### 移动窗口位置的方法(可能被禁用)[m
[31m-`moveTo(x,y)`：移动窗口到固定位置，x、y分别表示新位置的坐标[m
[31m-`moveBy(x,y)`：将当前窗口移动到相对现在水平和垂直方向上的距离[m
[31m-#### 窗口大小[m
[31m-#####属性[m
[31m-+ `outerWidth` 和`outerHeight`：浏览器窗口本身的宽、高。[m
[31m-+ `innerWidth`和`innerHeight`：页面视图区对应宽、高。[m
[31m-[m
[31m-在IE9 以下，不支持以上属性，不过 可以通过`DOM`提供页面可见区域的相关信息。[m
[31m-`document.documentElement.clientWidth` 和 `document.documentElement.clientHeight`提供页面视口信息，**不包括**外边距，边框和垂直滚动条的距离。在**IE6**中，只有页面在标准模式下，才支持这些属性。在混杂模式下，必须通过`documtent.body.clientWidth`和`documtent.body.clientHeight`才能取得相同信息。[m
[31m-#### 跨浏览器取得页面视口大小(非精确值)[m
[31m-[m
[31m-``` javascript[m
[31m-if (typeof pageWidth === "number") {[m
[31m-  // 判断页面是否处于标准模式[m
[31m-  if (document.compatMode === "CSS1Compat") {[m
[31m-    pageWidth = document.documentElement.clientWidth;[m
[31m-    pageHeight = document.documentElement.clientHeight;[m
[31m-  } else {[m
[31m-    pageWidth = document.body.clientWidth;[m
[31m-    pageHeight = document.body.clientHeight;[m
[31m-  }[m
[31m-}[m
[31m-```[m
[31m-[m
[31m-#### 调整窗口大小的方法（可能被禁用）[m
[31m-+ `resizeTo`：接收浏览器窗口新的宽度及高度[m
[31m-+ `resizeBy`：接收新窗口与原窗口的宽度和高度之差[m
[31m-#### 窗口方法及相关属性[m
[31m-+ `window.open()`导航到一个既定的`url`，并返回一个指向新窗口的引用[m
[31m-+ `window.close()` 关闭新打开的窗口，仅适用于通过`window.open`打开的弹出窗口[m
[31m-+ `opener`：是`window`对象的一个属性，如果该窗口是使用`window.open()`方法打开的，则指向打开它的原始对象，否则为`null`[m
[31m-### `setTimeout`和 `setInterval`[m
[31m-`setTimeout` 即超时调用，在指定的时间过后执行代码，接收两个参数：要执行的代码和以毫秒表示的时间[m
[31m-`clearTimeout`：取消超时调用[m
[31m-``` javascript[m
[31m-var timer = setTimeout(function() {[m
[31m-  console.log("settimeout");[m
[31m-}, 1000);[m
[31m-[m
[31m-clearTimeout(timer);[m
[31m-```[m
[31m-`setInterval`：间歇性调用，传入参数同`setTimeout`，返回一个ID，可用于在将来某个时刻取消间歇调用[m
[31m-`clearInterval`：取消间歇调用[m
[31m-``` javascript[m
[31m-var timer = setInterval(function() {[m
[31m-  console.log("setInterval");[m
[31m-}, 1000);[m
[31m-[m
[31m-clearInterval(timer);[m
[31m-```[m
[31m-### 系统对话框[m
[31m-+ `alert()`：接收一个字符串并显示一个对话框给用户[m
[31m-![Alt text](./1531035654222.png)[m
[31m-[m
[31m-+ `confirm()`：接收一个字符串，显示一个确认对话框，并返回用户单击确定按钮的布尔值[m
[31m-![Alt text](./1531035934129.png)[m
[31m-[m
[31m-+ `prompt()`：显示“提示框”，接收两个参数，要显示给用户的文本和输入框默认值，该方法返回用户输入的值[m
[31m-![Alt text](./1531751185572.png)[m
[31m-[m
[31m-+ `print()`：显示打印对话框[m
[31m-+ `find()`：传入一个字符串，返回在该页面 查找结果的布尔值[m
[31m-### 窗口关系及框架(frame 在web标准中已经被废除)[m
[31m-#### 框架层级关系[m
[31m-[m
[31m-`top`对象始终指向最外层框架，也就是`window`。[m
[31m-`parent`指向当前框架的直接上层框架。[m
[31m-`self`指向`window`，两者可以互换使用[m
[31m-#### 访问框架对象[m
[31m-每个框架都拥有自己的`window`对象，并保存在`frames`集合中。在`frames`集合中，可以通过**数值索引**(从`0`开始，从左到右，从上到下)或者**框架名称** 来访问相应的`window`对象[m
[31m-``` htmlbars[m
[31m-<html>[m
[31m-[m
[31m-<head>[m
[31m-  <meta charset="utf-8" />[m
[31m-  <title></title>[m
[31m-</head>[m
[31m-[m
[31m-<body>[m
[31m-  <frameset>[m
[31m-    <frame src="frame.html" name='topFrame'>[m
[31m-      <frameset cols="50% 50%">[m
[31m-        <frame src="left.html" name='leftFrame'>[m
[31m-        <frame src="right.html" name='rightFrame'>[m
[31m-      </frameset>[m
[31m-  </frameset>[m
[31m-</body>[m
[31m-[m
[31m-</html>[m
[31m-```[m
[31m-以上代码中 创建了3个框架，若要访问名为`topFrame`的框架，可以通过以下方式：[m
[31m-+  `window.frames[0]`[m
[31m-+  `window.frames["topFrame"]`[m
[31m-+  `frames[0]`[m
[31m-+  `frames["topFrame"]`[m
[31m-+  `top.frames[0]`[m
[31m-+  `top.frames["topFrame"]`[m
\ No newline at end of file[m
